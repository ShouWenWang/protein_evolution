%%
% Delta is generated directly for the reduced representation
% each site can be a value from 1 to 21

close all; clear all;
addpath('./functions');

%% initialization
 pseudo_ratio=0.0001;
 zero_sum_gauge=1; % use zero-sum gauge
%% loading the data
% the data can be generated by calling
% generate_artificial_protein_sequence
load ./Data/artificial_protein_sequences_and_Delta
Delta=Delta_new_vector;
[M_new,L]=size(sequence_new);
%%  new representation
[binary_sequence_old,inverse_index_old,conserved_num_old,index_aminoacid_old]=reduced_representation(sequence_new,amino_N);
mean_sequence_old=mean(binary_sequence_old,1);

count_0=length(mean_sequence_old);
figureParameter,bar(1:count_0,mean_sequence_old)
title('seq corr')
fig_name='./figure/mean_beta_no_pseudocount.eps';
figurePostTreat

%%  convert Delta_0 to this reduced representation

%Delta_new=Delta_conversion(Delta_0,conserved_num_old,index_aminoacid_old,amino_N);

%% remove the degeneracy: remove the largest aminiacid with each site
% how good this approach is depends on how this affects the sum of the
% sequences within each site is affected by it
% it is better if this removed aminoacid appears very frequently
p=zeros(1,amino_N)+1/amino_N;

[conserved_num,index_k,index,remove_q,phi_conserv]=remove_residue_q(binary_sequence_old,index_aminoacid_old,p,conserved_num_old,q,pseudo_ratio);
%[conserved_num,index_k,index,remove_q]=remove_redundance_q_pseudo(mean_sequence_old,index_aminoacid_old,p,conserved_num_old,q);

binary_sequence=binary_sequence_old(:,index);
index_aminoacid=index_aminoacid_old(index);
inverse_index=inverse_index_old(index);




%% the effective Delta
%Delta=Delta_new(index);
temp_1=(0:L-1)*amino_N+remove_q;
mean_removed=zeros(1,L);

for j=1:L
   temp_0=index_k(j)+1:index_k(j)+conserved_num(j);
   %Delta(temp_0)=Delta(temp_0)-Delta_0(temp_1(j));
   mean_removed(j)=mean_sequence_old(temp_1(j)); 
end

%% covariance matrix
Weight=ones(M_new,1);% independent sequences
site_size=20;
[seq_corr,mean_sequence]=covariance_matrix(binary_sequence,Weight,pseudo_ratio,site_size);

figure,bar(1:length(mean_sequence),mean_sequence);
xlabel('Residue index');
ylabel('Mean presence');

count=size(seq_corr,2);
figureParameter
f1=image(1:count,1:count,10000*seq_corr);
colorbar;
%set(gca, 'clim', [-0.25 0.25]);
%set(gca, 'clim', [-1 1]);
%a1=xlabel('$x$');
%a2=ylabel('$y$');
title('seq corr')
fig_name='./figure/seq_corr.jpg';
set(gca,'YDir','normal')
print(fig_name,'-r400','-djpeg');

%% inverse matrix 
inv_corr=inv(seq_corr);
inv_corr_off_diag=inv_corr;
for k=1:L
    temp_index=index_k(k)+1:index_k(k)+conserved_num(k);
    inv_corr_off_diag(temp_index,temp_index)=0; %setting the diagonal terms to zero
end

count=size(seq_corr,2);


%%%%% compute theoretical predictions
inv_diag=zeros(1,count);
predict_inv_diag=zeros(1,count);
for j=1:L
    for k=1:20
     temp_index=20*(j-1)+k;
     inv_diag(1,temp_index)=inv_corr(temp_index,temp_index);
     predict_inv_diag(temp_index)=1/mean_removed(j)+1/mean_sequence(temp_index)+0.15*abs(Delta(temp_index))^2;
    end
end

predict_inv=zeros(count,count);
conservation_diag_block=zeros(count,count); % the effect of conservation in diagonal block
for j=1:L
    for j1=1:L
      for k=1:20
          for k1=1:20
               temp_index1=20*(j-1)+k;
               temp_index2=20*(j1-1)+k1;
               %%%%%%%%%%%%%%%
               if j==j1 && k==k1
               predict_inv(temp_index1,temp_index2)=0.15*abs(Delta(temp_index1))^2+1/mean_removed(j)+1/mean_sequence(temp_index1);
               conservation_diag_block(temp_index1,temp_index2)=1/mean_removed(j)+1/mean_sequence(temp_index1);
               else
                   if j==j1 && k~=k1
                     predict_inv(temp_index1,temp_index2)=0.15*Delta(temp_index1)*Delta(temp_index2)+1/mean_removed(j);
                     conservation_diag_block(temp_index1,temp_index2)=1/mean_removed(j);
            


                   else
                     predict_inv(temp_index1,temp_index2)=0.15*Delta(temp_index1)*Delta(temp_index2);


                   end
               end
             %%%%%%%%%%%%%%
          end
      end
    end
end



figureParameter
f1=plot(1:count,inv_corr(50,:),'-r',1:count,predict_inv(50,:),':k')
xlim([0 count+1]);
a1=xlabel('$\Delta$');
%a2=ylabel('Distribution');
fig_name='./figure/predicted_inv_1.eps';
figurePostTreat




figureParameter
f1=plot(1:count,inv_diag,'-r',1:count,predict_inv_diag,':k')
xlim([0 count+1]);
a1=xlabel('$\Delta$');
h1=legend('data','$prediction$');
%a2=ylabel('Distribution');
fig_name='./figure/predicted_inv.eps';
figurePostTreat


figureParameter
f1=image(1:count,1:count,2*abs(inv_corr_off_diag));
colorbar;
%set(gca, 'clim', [-0.25 0.25]);
%set(gca, 'clim', [-1 1]);
%a1=xlabel('$x$');
%a2=ylabel('$y$');
fig_name='./figure/corr1.jpg';
set(gca,'YDir','normal')
print(fig_name,'-r400','-djpeg');

%% reweighting, we no longer use this approach

% count=size(seq_corr,1);
% var=zeros(count,1);
% corr_off_diag=zeros(count,count);
% for k=1:count
%     var(k)=seq_corr(k,k);
% end
% for k=1:count
%     for j=k+1:count
%         corr_off_diag(k,j)=seq_corr(k,j)/(var(k)*var(j));
%     end
% end
%    corr_off_diag=corr_off_diag+corr_off_diag'; 
% 
% for k=1:L
%     temp_index=index_k(k)+1:index_k(k)+conserved_num(k);
%     corr_off_diag(temp_index,temp_index)=0;
% end


%% compression: taking Frobenius norm for the matrix
compres_inv_C=matrix_compression(index_k,conserved_num,inv_corr_off_diag,zero_sum_gauge);


figureParameter
f1=image(1:L,1:L,50*abs(compres_inv_C));
colorbar;
fig_name='./figure/corr_compress.jpg';
set(gca,'YDir','normal')
print(fig_name,'-r400','-djpeg');

figure,hist(nonzeros(reshape((compres_inv_C),[],1)),100,'r');

compres_inv_C=zeros(L,L);
Delta_1=zeros(1,L);
for j=1:L
    temp_index_1=index_k(j)+1:index_k(j)+conserved_num(j);
  for k=1:L
    temp_index_2=index_k(k)+1:index_k(k)+conserved_num(k);
        data0=inv_corr_off_diag(temp_index_1,temp_index_2);
        %tot_N=length(temp_index_1)*length(temp_index_2);
        %compres_inv_C(j,k)=sqrt(sum(sum(data0.^2))/tot_N);
        
        compres_inv_C(j,k)=max(max(abs(data0)));
  end
  %Delta_1(j)=sqrt(mean(Delta(temp_index_1).^2));
  Delta_1(j)=max(abs(Delta(temp_index_1)));
end

figureParameter
f1=image(1:L,1:L,abs(compres_inv_C));
colorbar;
fig_name='./figure/corr_compress.jpg';
set(gca,'YDir','normal')
print(fig_name,'-r400','-djpeg');

%figure,hist(nonzeros(reshape((compres_inv_C),[],1)),100,'r');


%%  analyze the data
%select_data=seq_corr;
select_data=compres_inv_C;
%select_data=inv_corr_off_diag;
%select_data=inv(seq_corr)-conservation_diag_block;


count=size(select_data,2);
clear f1 a1 a2 h1
figureParameter
image(1:count,1:count,abs(select_data));
colorbar;
%set(gca, 'clim', [-0.25 0.25]);
%set(gca, 'clim', [-1 1]);
%a1=xlabel('$x$');
%a2=ylabel('$y$');
fig_name='./figure/corr1.jpg';
set(gca,'YDir','normal')
print(fig_name,'-r400','-djpeg');
%figurePostTreat;

[NormVector_corr,orderEigValue_corr]=orderedEigSystem(select_data,0);

max_N=count;
figureParameter
f1=plot(1:max_N,orderEigValue_corr(:,1),'or');
a1=xlabel('Mode: $k$');
a2=ylabel('Eigenvalue: $\lambda_k^c$');
xlim([1 max_N+1]);
%ylim([-1000 2300]);
fig_name='./figure/corr_eig.eps';
figurePostTreat



if count>20
    select_index=1:20;
else
    select_index=1:10;
end

columns=1:count;
clear f1 a1 a2 h1
figureParameter
image(select_index,columns,500*abs(NormVector_corr(columns,select_index)));
%colorbar;
fig_name='./figure/corr_mode.jpg';
set(gca,'YDir','normal')
print(fig_name,'-r400','-djpeg');

% temp0=mean(binary_sequence,1);
% mean_sequence=log((1-temp0)*(1/amino_N)./(temp0.*(1-1/amino_N)));%+temp0.*log(temp0./(1/amino_N));
% mean_sequence_1=mean_sequence./(sqrt(sum(mean_sequence.*mean_sequence)));


weight=Delta';
Delta_weight=weight./(sqrt(sum(weight.*weight)));


figureParameter
bar(1:count,[NormVector_corr(:,1),Delta_weight]);
%set(gca,'XTICKlabel',index2);
h1=legend('$\nu_{1}^l$','$\tilde{\Delta}_l$');%-\Delta_6^l\;$');
set(h1,'location','southeast')
legend boxoff
xlim([0 count+1]);
fig_name='./figure/corr_mode2.eps';
figurePostTreat


figureParameter
bar(1:200,Delta,'b');
%set(gca,'XTICKlabel',index2);
%h1=legend('$\nu_{1}^l$','$\tilde{\Delta}_l$');%-\Delta_6^l\;$');
%set(h1,'location','southeast')
xlim([0 201]);
ylim([-30 30]);
fig_name='./figure/corr_mode2.eps';
figurePostTreat


%% random expectation
rand_expec=sqrt(2/(pi*count))*sum(abs(Delta))/sqrt(sum(Delta.*Delta));



compres_Delta=vector_compression(index_k,conserved_num,Delta);
weight_Comp_Delta=compres_Delta./sqrt(sum(compres_Delta.^2));
weight_Delta=Delta./sqrt(sum(Delta.^2));

ratio=(abs(weight_Delta)*abs(NormVector_corr))';

figureParameter
bar(1:count,ratio,1,'Facecolor','k');
a1=xlabel('Mode: $k$');
a2=ylabel('Recovery of $\Delta_l$');
ylim([0 1.03]);
xlim([0 count+1]);
fig_name='./figure/corr_vec.eps';
figurePostTreat


compres_inv=vector_compression(index_k,conserved_num,NormVector_corr(:,1));

figureParameter
bar(1:L,compres_inv,'r');
a1=xlabel('site: l');
%a2=ylabel('Recovery of $\Delta_l$');
xlim([0.5 L+0.5]);
fig_name='./figure/corr_vec.eps';
figurePostTreat

figureParameter
bar(1:L,compres_Delta,'b');
a1=xlabel('site: l');
%a2=ylabel('Recovery of $\Delta_l$');
xlim([0.5 L+0.5]);
fig_name='./figure/comp_Delta.eps';
figurePostTreat


clear f1
figureParameter
bar(1:L,NormVector_corr(:,1),'r');
a1=xlabel('site: l');
%a2=ylabel('Recovery of $\Delta_l$');
xlim([0.5 L+0.5]);
fig_name='./figure/corr_vec.eps';
figurePostTreat



%%  Rama's method
q0=0.5;
phi_conserv=-log((1-mean_sequence)./mean_sequence)+log((1-q0)/q0);

figureParameter
f1=plot(1:length(phi_conserv),phi_conserv,'*k');
a1=xlabel('$l$');
a2=ylabel('$\phi_l$');
%a2=ylabel('$1/\sigma_l^2$');
%h1=legend('$\phi_l$');
axis tight
%ylim([0 6]);
fig_name='./figure/weight.eps';
figurePostTreat

SCA_seq_corr=abs(seq_corr).*abs(phi_conserv*phi_conserv');
compres_SCA_C=matrix_compression(index_k,conserved_num,SCA_seq_corr,0);

figureParameter
f1=image(1:L,1:L,100*abs(SCA_seq_corr));
colorbar;
fig_name='./figure/corr_compress_SCA.jpg';
set(gca,'YDir','normal')
print(fig_name,'-r400','-djpeg');

select_data=compres_SCA_C;
[NormVector_corr,orderEigValue_corr]=orderedEigSystem(select_data,0);


Delta1=Delta;
Delta_weight=Delta1./(sqrt(sum(Delta1.*Delta1)));

vector=sqrt(abs(NormVector_corr));
for j=1:count
vector(:,j)=vector(:,j)/sqrt(sum(vector(:,j).*vector(:,j)));
end
ratio_rama=(abs(Delta_weight)*abs(vector))';

vector_1=abs(NormVector_corr);
ratio_rama_1=(abs(Delta_weight)*abs(vector_1))';


% 
% select_index=1:10;
% columns=1:count;
% clear f1 a1 a2 h1
% figureParameter
% pcolor(select_index,columns,abs(NormVector_corr(columns,select_index)));
% 
% colorbar;
% fig_name='./figure/corr_mode.jpg';
% print(fig_name,'-r400','-djpeg');
% 
% %% inverse matrix
% 
% figureParameter
% f1=image(1:count,1:count,5*abs(inv_corr));
% colorbar;
% %set(gca, 'clim', [-0.25 0.25]);
% %set(gca, 'clim', [-1 1]);
% %a1=xlabel('$x$');
% %a2=ylabel('$y$');
% fig_name='./figure/mode_correlation.jpg';
% set(gca,'YDir','normal')
% print(fig_name,'-r500','-djpeg');
% 
% 
% x0=69;
% y0=3;
% figureParameter
% clear a1 a2 f1 h1
% bar(1:count,[inv_corr_off_diag(:,x0)/inv_corr_off_diag(y0,x0)*Delta(y0),Delta']);
% %set(gca,'XTICKlabel',index2);
% %a2=ylabel('$C^{-1}_{ll''}/\Delta_{l''}$');
% %h1=legend('$C^{-1}_{ll''}/\Delta_{l''}$'','$\Delta_l$');%-\Delta_6^l\;$');
% %set(h1,'location','northeast')
% h1=legend('$C^{-1}_{l1}$','$\Delta_l$');%-\Delta_6^l\;$');
% set(h1,'location','northeast')
% %ylim([0 25]);
% xlim([0 count]);
% fig_name='./figure/corr_mode2.eps';
% figurePostTreat
% 
% 
% %data_new=data/data(86)*Delta(86);
% figureParameter
% clear a1 a2 f1 h1
% bar(1:length(Delta),[Delta],'b');
% %set(gca,'XTICKlabel',index2);
% %a2=ylabel('$C^{-1}_{ll''}/\Delta_{l''}$');
% h1=legend('$\Delta_l$','$\Delta_l$');%-\Delta_6^l\;$');
% set(h1,'location','north')
% ylim([0 8]);
% xlim([0 count]);
% fig_name='./figure/corr_mode2.eps';
% figurePostTreat
% 
% 
%  
% %% simple hotspot determination
%  
% index_vec=1:10;
%  
%  
% for j=1:length(index_vec)
%     
%  
%  
% %for j=81:91
% vector=abs(NormVector_corr(:,index_vec(j)));
% %vector=abs(coeff(:,j));
% %figure,bar(1:count,vector,'r')
%  
% factor_high=5; factor_low=2;
% factor=2;
% tot_spot=0;
% for s=1:5
% [hot_index_x,hotspot_data]=search_hotspot(vector,mean(vector),[factor*std(vector), 1]);
%  
% my_hotspot=[];
% hot_index_x=hot_index_x(index_aminoacid(hot_index_x)~=1 & index_aminoacid(hot_index_x)~=0);
% my_hotspot=cat(1,my_hotspot,inverse_index(hot_index_x));
% final_hot=312+unique(my_hotspot)';
%  
%  
%     tot_spot=length(final_hot);
%     if tot_spot>21
%         temp=factor;
%         factor=(factor+factor_high)/2; 
%         factor_low=temp;
%     else
%         temp=factor;
%         factor=(factor+factor_low)/2;
%         factor_high=temp;
%     
%     end
%  
% end
% unique(my_hotspot)'
% end
% 
% 



